<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<!-- user_db -->
<mapper namespace="com.esuizhen.client.sync.dao.PatientDao" >	
	<select id="getBatchSyncPatient" resultType="java.util.LinkedHashMap" parameterType="com.esuizhen.client.sync.model.TBatchDetailInfo">
		 SELECT
			t1.patientId,t1.patientNo,IF(t3.syncFlag=2,1,t3.syncFlag) as opFlag,t1.patientCode,t1.inpatientNo,t1.userId,t1.uuid,t1.mobile,
			t1.trueName,t1.preTrueName,t1.auditState,t1.auditRemark,t1.nickName,t1.hasVisibleMedicalRecord,t1.sex,t1.birthDate,
			t1.userPictureUrl,t1.patientRelation,t1.familyName,t1.familyPhone,t1.liveStatus,t1.deathDate,t1.causeOfDeath,t1.underlyCausesOfDeath,
			t1.isInHospitalDeath,t1.isTumourDeath,t1.bloodType,t1.bloodTypeRH,t1.bodyHeight,t1.disabilityStatus,t1.geneticDiseaseHistory,
			t1.drugAllergyHistory,t1.medicalPayType,t1.sourceDiagnosis,t1.sourceDiagnosis2,t1.sourceDiagnosis3,t1.sourceDiseaseCode,t1.sourceDiseaseCode2,
			t1.sourceDiseaseCode3,t1.sourceDiseaseTypeId,t1.sourceDiseaseTypeId2,t1.sourceDiseaseTypeId3,t1.sourceDiseaseTypeName,t1.sourceDiseaseTypeName2,
			t1.sourceDiseaseTypeName3,t1.icdDiseaseTypeId,t1.icdDiseaseTypeId2,t1.diagnosisType,t1.diagnosisType2,t1.sourceTumorFlag,t1.sourceTumorFlag2,
			t1.confirmedDate,t1.confirmedDate2,t1.confirmedDate3,t1.confirmedAge,t1.confirmedAge2,t1.diagnosisId,t1.diagnosisId2,t1.inhospitalId,t1.inhospitalId2,
			t1.sourcePathologyDiagnosis,t1.sourcePathologyDiagnosis2,t1.sourcePathologyDiseaseCode,t1.sourcePathologyDiseaseCode2,t1.secondaryDiagnosis,t1.secondaryDiseaseCode,
			t1.secondaryPathologyDiagnosis,t1.secondaryPathologyDiseaseCode,t1.attendingDoctor,
			(SELECT uuid FROM user_db.u_doctor WHERE doctorId = t1.attendingDoctor) AS attendingDoctorUuid,
			t1.inchargeDoctor,
			(SELECT uuid FROM user_db.u_doctor WHERE doctorId = t1.inchargeDoctor) AS inchargeDoctorUuid,
			t1.followupFlag,t1.lostFollowupCause,t1.lostFollowupCauseResultValue,
			t1.lostFollowupTime,t1.oldFollowupFlag,t1.oldLostFollowupCause,t1.oldLostFollowupCauseResultValue,t1.oldLostFollowupTime,t1.createTime,
			t1.updateTime,t1.codePerson,t1.codePersonName,t1.outPatientFlag,
			t1.inhospitalState,
			t1.patientType,t1.mergeFlag,t1.mergeFrom,
			IFNULL(t1.mergeFromUuid,(SELECT uuid FROM user_db.u_patient WHERE patientId =t1.mergeFrom)) AS mergeFromUuid,
			t1.mergeTarget,
			IFNULL(t1.mergeTargetUuid,(SELECT uuid FROM user_db.u_patient WHERE patientId =t1.mergeTarget)) AS mergeTargetUuid,
			t1.mergeTime,
			t1.clinicNo,t1.medicareCardNo,t1.medicalCareAreaId,t1.medicalCarePlace,t1.famZipCode,t1.rawCreateTime,t1.lastAttendingDate,t1.bodyWeight,t1.cancelLostFollowupFlag,
			t1.cancelLostFollowupTime,t1.infoState,t1.stafferType,
			t1.specialDiseaseRegisterId,t1.deathPatientIntoTask,t1.lostPatientIntoTask,t1.otherHospital,
			(SELECT hospitalId FROM sc_db.conf_sync LIMIT 1) AS hospitalId
        FROM user_db.u_patient t1 
        <!-- JOIN user_db.uuid_patient_merge t2 ON (t1.patientId = t2.patientId and t2.repeatflag != 1) -->
        JOIN sc_db.u_patient_sync_result_client t3 ON t1.uuid = t3.uuid 
        JOIN sc_db.conf_sync t4 ON 1=1
        WHERE
            t1.patientType=1 
        AND t3.syncFlag in (0,2) 
        AND IF(t4.ctlOutPatientFlag=0,t1.outPatientFlag=2,1=1)
        AND IF(t1.outPatientFlag=2,(SELECT count(1) FROM user_db.uuid_patient_merge where patientId = t1.patientId and repeatflag=1)=0,1=1)   
        LIMIT #{detailInfo.syncSize}
  	</select>
  	
  	<select id="getBatchSyncUserByPatientUserId" resultType="java.util.LinkedHashMap" parameterType="java.lang.String">
		SELECT
			t1.userId,t3.uuid,t1.userName,t1.role,t1.accountType,t1.infoState,t1.trueName,t1.createTime,t1.firstLoginTime,t1.updateTime,
			t1.cryptPasswd,t1.nickName,t1.mobile,t1.sex,t1.birthDate,t1.userPictureUrl,t1.email,t1.nationId,t1.nation,t1.nationalityId,
			t1.country,t1.cityId,t1.cityCode,t1.city,t1.address,t1.nativePlace,t1.birthPlaceCode,t1.birthPlaceAddress,
			t1.occupationId,t1.profession,t1.company,t1.idType,t1.identification,t1.marriageStatus,t1.signature,t1.education,
			t1.school,t1.interest,t1.idFileUrl,t1.state,t1.subroles,t1.points,t1.lastLoginTime,t1.sourceFlag,t1.userFlag,t1.migrateFlag,
			t1.relatedUserId,t1.lastLogoutTime,t1.appFlag,t1.weixinFlag,t1.pcFlag,t1.patientNo,t1.clinicNo,
			t1.staffNo,t1.companyTel,t1.comZipCode,t1.rawCreateTime,t1.mergeFlag,t1.mergeFrom,
	        IFNULL(t1.mergeFromUuid,(SELECT uuid FROM user_db.u_patient WHERE patientId =t1.mergeFrom)) AS mergeFromUuid,
			t1.mergeTarget,
			IFNULL(t1.mergeTargetUuid,(SELECT uuid FROM user_db.u_patient WHERE patientId =t1.mergeTarget)) AS mergeTargetUuid,
			t1.mergeTime,t1.tobFlag,t1.rawOccupationId,t1.rawProfession
		FROM
			user_db.u_user t1 
		JOIN user_db.u_patient t3 ON t1.userId = t3.userId
		WHERE
			t1.userId in (${userIds}) 
	</select>

	<select id="getBatchMegerPatient" resultType="java.util.LinkedHashMap">
		SELECT
			t2.mergeFlag,
			t2.patientId,
			IFNULL(t2.mergeFromUuid,(SELECT uuid FROM user_db.u_patient WHERE patientId =t2.mergeFrom)) AS mergeFromUuid,
			IFNULL(t2.mergeTargetUuid,(SELECT uuid FROM user_db.u_patient WHERE patientId =t2.mergeTarget)) AS mergeTargetUuid,
			t2.mergeTime
		FROM sc_db.u_patient_sync_result_client t1
		LEFT JOIN user_db.u_patient t2 ON t1.uuid=t2.uuid AND t2.patientType=-1 AND t2.mergeFlag=2
		WHERE t1.syncFlag=3
		LIMIT 1000
	</select>
	  	
  	<update id="updatePatientSyncflag">
		UPDATE sc_db.u_patient_sync_result_client t1
		JOIN user_db.u_patient t2 ON t1.uuid = t2.uuid
		<choose>
			<when test="syncFlag==9">
				SET t1.opFlag=IF(t1.syncFlag=0,1,2),t1.syncFlag = 9 , t1.syncTime=NOW(),t1.updateTime = NOW()
			</when>
			<otherwise>
				SET t1.syncFlag = #{syncFlag} , t1.updateTime = NOW()
			</otherwise>
		</choose>
		WHERE
			t2.patientId IN (${patientIds})
	</update>
	
	<update id="updateSyncResult" parameterType="com.esuizhen.client.sync.bean.TBatchDataResultInfo">
		UPDATE sc_db.u_patient_sync_result_client t1
		SET 
		    t1.batchId = #{tBatchDataResultInfo.batchId},
		    t1.syncFlag = #{tBatchDataResultInfo.syncFlag},
			t1.cause = #{tBatchDataResultInfo.cause},
			t1.updateTime = NOW()
		WHERE
			t1.uuid = #{tBatchDataResultInfo.resultId} and t1.syncFlag = 9
	</update>
</mapper>